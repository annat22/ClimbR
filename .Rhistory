} else {ts.key <- NULL}
# get animal info
animals <- climbGETdf("animals") %>%
select(materialKey, animalName, "climbID"=animalId, dateBorn, dateExit, sex, use, line) %>%
mutate(across(matches("date"), as.Date))
# get sample info
samples <- climbGETdf("samples") %>%
select(materialKey, sampleID, sampleName=name,
sampleType=type, sampleSubtype=subtype, harvestDate, sampleStatus=status,
measurement, measurementUnit, lotNumber) %>%
mutate(across(matches("date"), as.Date))
# get task instance keys for the specific query
qL <- list(WorkflowTaskName = task_name, TaskStatusKey = ts.key, MaterialKey = mat.key,
CompletedStartDate = complete_date_start, CompletedEndDate = complete_date_end,
DueStartDate = due_date_start, DueEndDate = due_date_end)
df.ts0 <- climbGETdf(facet = "taskinstances", queryList = qL)
dft <- tibble(taskInstanceKey = NA, jobKey=NA, workflowTaskName = NA, taskAlias = NA,
taskStatus = NA, materialKeys = NA, assignedTo = NA, dateDue = NA,
completedBy = NA, dateComplete = NA, reviewedBy = NA, dateReviewed = NA,
createdBy = NA, dateCreated = NA, modifiedBy = NA, dateModified = NA)
if (length(df.ts0) > 0) {
df.ts <- merge(df.ts0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.ts <- dft}
# filter out group task instances with more than 2 material keys
# one material key is for animal, one for sample if applicable, but
# it's not always animal first
df.ts <- df.ts %>%
filter(str_count(materialKeys, ";") < 2) %>%
mutate(materialKey1 = str_extract(materialKeys, "^[^;]+"),
materialKey2 = str_extract(materialKeys, "[^;]+$")) %>%
mutate(a.materialKey = case_when(materialKey1 %in% animals$materialKey ~ materialKey1,
materialKey2 %in% animals$materialKey ~ materialKey2,
.default = NA),
s.materialKey = case_when(materialKey1 %in% samples$materialKey ~ materialKey1,
materialKey2 %in% samples$materialKey ~ materialKey2,
.default = NA))
# get output values
qL <- list(WorkflowTaskName = task_name, MaterialKey = mat.key)
df.out0 <- climbGETdf("taskinstances/taskOutputs", queryList = qL)
dft <- tibble(taskInstanceKey = NA, outputName = NA, outputValue = NA, materialKeys =NA)
if (length(df.out0) > 0) {
df.out.l <- merge(df.out0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.out.l <- dft %>%
mutate(across(everything(), as.character))
}
df.out <-  df.out.l %>%
filter(taskInstanceKey %in% df.ts$taskInstanceKey) %>%
pivot_wider(id_cols = c(taskInstanceKey), names_from = "outputName", values_from = "outputValue")
# get input values
qL <- list(WorkflowTaskName = task_name, MaterialKey = mat.key)
df.in0 <- climbGETdf("taskinstances/taskInputs", queryList = qL)
dft <- tibble(taskInstanceKey = NA, inputName = NA, inputValue = NA)
if (length(df.in0) > 0) {
df.in.l <- merge(df.in0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.in.l <- dft}
df.in <-  df.in.l %>%
mutate(across(everything(), as.character)) %>%
filter(taskInstanceKey %in% df.ts$taskInstanceKey) %>%
pivot_wider(names_from = "inputName", values_from = "inputValue")
# get study and program
jobs <- climbGETdf("jobs") %>%
select(jobKey, "study"=jobID, "program"=studyName)
# get notes
notes <- climbGETdf("notes") %>%
select(noteText, taskInstanceKey, modifiedBy, dateModified) %>%
mutate(note = paste0(noteText, " [", modifiedBy, dateModified, "]")) %>%
group_by(taskInstanceKey) %>%
summarise(all_notes = paste(note, collapse = "; "), .groups = "drop")
# put it all together
df <- right_join(jobs, df.ts, by="jobKey") %>%
left_join(df.in, by="taskInstanceKey") %>%
left_join(df.out, by="taskInstanceKey") %>%
left_join(animals, by=c("a.materialKey"="materialKey")) %>%
left_join(notes, by="taskInstanceKey")  %>%
left_join(samples, by=c("s.materialKey"="materialKey")) %>%
relocate(animalName:line) %>%
select(-matches("jobKey")) %>%
select(-any_of("NA")) %>%
select(-matches("materialKey"))
return(df)
View(df)
task_name="Weight_gr"; task_status = NULL;
animal_name = "ADONIS"; climb_id = NULL;
due_date_start = NULL; due_date_end = NULL;
complete_date_start = NULL; complete_date_end = NULL
source("https://raw.githubusercontent.com/annat22/ClimbR/main/climbGETdf.R")
# Look up MaterialKey based on animal name or ID
mat.key <- NULL
if (!is.null(animal_name)) {
mat.key <- climbGETdf("animals") %>%
filter(animalName == toupper(animal_name)) %>%
pull(materialKey)
}
if (!is.null(climb_id)) {
mat.key <- climbGETdf("animals") %>%
filter(animalId == climb_id) %>%
pull(materialKey)
}
# Look up taskStatus key based on task status
if (!is.null(task_status)) {
ts.key <- climbGETdf("vocabulary/taskStatus") %>%
filter(name==task_status) %>%
pull(key)
} else {ts.key <- NULL}
# get animal info
animals <- climbGETdf("animals") %>%
select(materialKey, animalName, "climbID"=animalId, dateBorn, dateExit, sex, use, line) %>%
mutate(across(matches("date"), as.Date))
# get sample info
samples <- climbGETdf("samples") %>%
select(materialKey, sampleID, sampleName=name,
sampleType=type, sampleSubtype=subtype, harvestDate, sampleStatus=status,
measurement, measurementUnit, lotNumber) %>%
mutate(across(matches("date"), as.Date))
# get task instance keys for the specific query
qL <- list(WorkflowTaskName = task_name, TaskStatusKey = ts.key, MaterialKey = mat.key,
CompletedStartDate = complete_date_start, CompletedEndDate = complete_date_end,
DueStartDate = due_date_start, DueEndDate = due_date_end)
df.ts0 <- climbGETdf(facet = "taskinstances", queryList = qL)
dft <- tibble(taskInstanceKey = NA, jobKey=NA, workflowTaskName = NA, taskAlias = NA,
taskStatus = NA, materialKeys = NA, assignedTo = NA, dateDue = NA,
completedBy = NA, dateComplete = NA, reviewedBy = NA, dateReviewed = NA,
createdBy = NA, dateCreated = NA, modifiedBy = NA, dateModified = NA)
if (length(df.ts0) > 0) {
df.ts <- merge(df.ts0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.ts <- dft}
# filter out group task instances with more than 2 material keys
# one material key is for animal, one for sample if applicable, but
# it's not always animal first
df.ts <- df.ts %>%
filter(str_count(materialKeys, ";") < 2) %>%
mutate(materialKey1 = str_extract(materialKeys, "^[^;]+"),
materialKey2 = str_extract(materialKeys, "[^;]+$")) %>%
mutate(a.materialKey = case_when(materialKey1 %in% animals$materialKey ~ materialKey1,
materialKey2 %in% animals$materialKey ~ materialKey2,
.default = NA),
s.materialKey = case_when(materialKey1 %in% samples$materialKey ~ materialKey1,
materialKey2 %in% samples$materialKey ~ materialKey2,
.default = NA))
# get output values
qL <- list(WorkflowTaskName = task_name, MaterialKey = mat.key)
df.out0 <- climbGETdf("taskinstances/taskOutputs", queryList = qL)
dft <- tibble(taskInstanceKey = NA, outputName = NA, outputValue = NA, materialKeys =NA)
if (length(df.out0) > 0) {
df.out.l <- merge(df.out0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.out.l <- dft %>%
mutate(across(everything(), as.character))
}
df.out <-  df.out.l %>%
filter(taskInstanceKey %in% df.ts$taskInstanceKey) %>%
pivot_wider(id_cols = c(taskInstanceKey), names_from = "outputName", values_from = "outputValue")
# get input values
qL <- list(WorkflowTaskName = task_name, MaterialKey = mat.key)
df.in0 <- climbGETdf("taskinstances/taskInputs", queryList = qL)
dft <- tibble(taskInstanceKey = NA, inputName = NA, inputValue = NA)
if (length(df.in0) > 0) {
df.in.l <- merge(df.in0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.in.l <- dft}
df.in <-  df.in.l %>%
mutate(across(everything(), as.character)) %>%
filter(taskInstanceKey %in% df.ts$taskInstanceKey) %>%
pivot_wider(names_from = "inputName", values_from = "inputValue")
# get study and program
jobs <- climbGETdf("jobs") %>%
select(jobKey, "study"=jobID, "program"=studyName)
# get notes
notes <- climbGETdf("notes") %>%
select(noteText, taskInstanceKey, modifiedBy, dateModified) %>%
mutate(note = paste0(noteText, " [", modifiedBy, dateModified, "]")) %>%
group_by(taskInstanceKey) %>%
summarise(all_notes = paste(note, collapse = "; "), .groups = "drop")
# put it all together
df <- right_join(jobs, df.ts, by="jobKey") %>%
left_join(df.in, by="taskInstanceKey") %>%
left_join(df.out, by="taskInstanceKey") %>%
left_join(animals, by=c("a.materialKey"="materialKey")) %>%
left_join(notes, by="taskInstanceKey")  %>%
left_join(samples, by=c("s.materialKey"="materialKey")) %>%
relocate(animalName:line) %>%
select(-matches("jobKey")) %>%
select(-any_of("NA")) %>%
select(-matches("materialKey"))
View(df)
task_name="Weight_gr"; task_status = NULL;
animal_name = NULL; climb_id = "466";
due_date_start = NULL; due_date_end = NULL;
complete_date_start = NULL; complete_date_end = NULL
climb_id = "480"
source("https://raw.githubusercontent.com/annat22/ClimbR/main/climbGETdf.R")
# Look up MaterialKey based on animal name or ID
mat.key <- NULL
if (!is.null(animal_name)) {
mat.key <- climbGETdf("animals") %>%
filter(animalName == toupper(animal_name)) %>%
pull(materialKey)
}
if (!is.null(climb_id)) {
mat.key <- climbGETdf("animals") %>%
filter(animalId == climb_id) %>%
pull(materialKey)
}
# Look up taskStatus key based on task status
if (!is.null(task_status)) {
ts.key <- climbGETdf("vocabulary/taskStatus") %>%
filter(name==task_status) %>%
pull(key)
} else {ts.key <- NULL}
# get animal info
animals <- climbGETdf("animals") %>%
select(materialKey, animalName, "climbID"=animalId, dateBorn, dateExit, sex, use, line) %>%
mutate(across(matches("date"), as.Date))
# get sample info
samples <- climbGETdf("samples") %>%
select(materialKey, sampleID, sampleName=name,
sampleType=type, sampleSubtype=subtype, harvestDate, sampleStatus=status,
measurement, measurementUnit, lotNumber) %>%
mutate(across(matches("date"), as.Date))
# get task instance keys for the specific query
qL <- list(WorkflowTaskName = task_name, TaskStatusKey = ts.key, MaterialKey = mat.key,
CompletedStartDate = complete_date_start, CompletedEndDate = complete_date_end,
DueStartDate = due_date_start, DueEndDate = due_date_end)
df.ts0 <- climbGETdf(facet = "taskinstances", queryList = qL)
dft <- tibble(taskInstanceKey = NA, jobKey=NA, workflowTaskName = NA, taskAlias = NA,
taskStatus = NA, materialKeys = NA, assignedTo = NA, dateDue = NA,
completedBy = NA, dateComplete = NA, reviewedBy = NA, dateReviewed = NA,
createdBy = NA, dateCreated = NA, modifiedBy = NA, dateModified = NA)
if (length(df.ts0) > 0) {
df.ts <- merge(df.ts0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.ts <- dft}
# filter out group task instances with more than 2 material keys
# one material key is for animal, one for sample if applicable, but
# it's not always animal first
df.ts <- df.ts %>%
filter(str_count(materialKeys, ";") < 2) %>%
mutate(materialKey1 = str_extract(materialKeys, "^[^;]+"),
materialKey2 = str_extract(materialKeys, "[^;]+$")) %>%
mutate(a.materialKey = case_when(materialKey1 %in% animals$materialKey ~ materialKey1,
materialKey2 %in% animals$materialKey ~ materialKey2,
.default = NA),
s.materialKey = case_when(materialKey1 %in% samples$materialKey ~ materialKey1,
materialKey2 %in% samples$materialKey ~ materialKey2,
.default = NA))
# get output values
qL <- list(WorkflowTaskName = task_name, MaterialKey = mat.key)
df.out0 <- climbGETdf("taskinstances/taskOutputs", queryList = qL)
dft <- tibble(taskInstanceKey = NA, outputName = NA, outputValue = NA, materialKeys =NA)
if (length(df.out0) > 0) {
df.out.l <- merge(df.out0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.out.l <- dft %>%
mutate(across(everything(), as.character))
}
df.out <-  df.out.l %>%
filter(taskInstanceKey %in% df.ts$taskInstanceKey) %>%
pivot_wider(id_cols = c(taskInstanceKey), names_from = "outputName", values_from = "outputValue")
# get input values
qL <- list(WorkflowTaskName = task_name, MaterialKey = mat.key)
df.in0 <- climbGETdf("taskinstances/taskInputs", queryList = qL)
dft <- tibble(taskInstanceKey = NA, inputName = NA, inputValue = NA)
if (length(df.in0) > 0) {
df.in.l <- merge(df.in0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.in.l <- dft}
df.in <-  df.in.l %>%
mutate(across(everything(), as.character)) %>%
filter(taskInstanceKey %in% df.ts$taskInstanceKey) %>%
pivot_wider(names_from = "inputName", values_from = "inputValue")
# get study and program
jobs <- climbGETdf("jobs") %>%
select(jobKey, "study"=jobID, "program"=studyName)
# get notes
notes <- climbGETdf("notes") %>%
select(noteText, taskInstanceKey, modifiedBy, dateModified) %>%
mutate(note = paste0(noteText, " [", modifiedBy, dateModified, "]")) %>%
group_by(taskInstanceKey) %>%
summarise(all_notes = paste(note, collapse = "; "), .groups = "drop")
# put it all together
df <- right_join(jobs, df.ts, by="jobKey") %>%
left_join(df.in, by="taskInstanceKey") %>%
left_join(df.out, by="taskInstanceKey") %>%
left_join(animals, by=c("a.materialKey"="materialKey")) %>%
left_join(notes, by="taskInstanceKey")  %>%
left_join(samples, by=c("s.materialKey"="materialKey")) %>%
relocate(animalName:line) %>%
select(-matches("jobKey")) %>%
select(-any_of("NA")) %>%
select(-matches("materialKey"))
View(df)
task_name="Blood Biomarkers Sample"; task_status = NULL;
animal_name = NULL; climb_id = NULL;
due_date_start = "20251009"; due_date_end = "20251016";
complete_date_start = NULL; complete_date_end = NULL
source("https://raw.githubusercontent.com/annat22/ClimbR/main/climbGETdf.R")
# Look up MaterialKey based on animal name or ID
mat.key <- NULL
if (!is.null(animal_name)) {
mat.key <- climbGETdf("animals") %>%
filter(animalName == toupper(animal_name)) %>%
pull(materialKey)
}
if (!is.null(climb_id)) {
mat.key <- climbGETdf("animals") %>%
filter(animalId == climb_id) %>%
pull(materialKey)
}
# Look up taskStatus key based on task status
if (!is.null(task_status)) {
ts.key <- climbGETdf("vocabulary/taskStatus") %>%
filter(name==task_status) %>%
pull(key)
} else {ts.key <- NULL}
# get animal info
animals <- climbGETdf("animals") %>%
select(materialKey, animalName, "climbID"=animalId, dateBorn, dateExit, sex, use, line) %>%
mutate(across(matches("date"), as.Date))
# get sample info
samples <- climbGETdf("samples") %>%
select(materialKey, sampleID, sampleName=name,
sampleType=type, sampleSubtype=subtype, harvestDate, sampleStatus=status,
measurement, measurementUnit, lotNumber) %>%
mutate(across(matches("date"), as.Date))
# get task instance keys for the specific query
qL <- list(WorkflowTaskName = task_name, TaskStatusKey = ts.key, MaterialKey = mat.key,
CompletedStartDate = complete_date_start, CompletedEndDate = complete_date_end,
DueStartDate = due_date_start, DueEndDate = due_date_end)
df.ts0 <- climbGETdf(facet = "taskinstances", queryList = qL)
dft <- tibble(taskInstanceKey = NA, jobKey=NA, workflowTaskName = NA, taskAlias = NA,
taskStatus = NA, materialKeys = NA, assignedTo = NA, dateDue = NA,
completedBy = NA, dateComplete = NA, reviewedBy = NA, dateReviewed = NA,
createdBy = NA, dateCreated = NA, modifiedBy = NA, dateModified = NA)
if (length(df.ts0) > 0) {
df.ts <- merge(df.ts0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.ts <- dft}
# filter out group task instances with more than 2 material keys
# one material key is for animal, one for sample if applicable, but
# it's not always animal first
df.ts <- df.ts %>%
filter(str_count(materialKeys, ";") < 2) %>%
mutate(materialKey1 = str_extract(materialKeys, "^[^;]+"),
materialKey2 = str_extract(materialKeys, "[^;]+$")) %>%
mutate(a.materialKey = case_when(materialKey1 %in% animals$materialKey ~ materialKey1,
materialKey2 %in% animals$materialKey ~ materialKey2,
.default = NA),
s.materialKey = case_when(materialKey1 %in% samples$materialKey ~ materialKey1,
materialKey2 %in% samples$materialKey ~ materialKey2,
.default = NA))
# get output values
qL <- list(WorkflowTaskName = task_name, MaterialKey = mat.key)
df.out0 <- climbGETdf("taskinstances/taskOutputs", queryList = qL)
dft <- tibble(taskInstanceKey = NA, outputName = NA, outputValue = NA, materialKeys =NA)
if (length(df.out0) > 0) {
df.out.l <- merge(df.out0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.out.l <- dft %>%
mutate(across(everything(), as.character))
}
df.out <-  df.out.l %>%
filter(taskInstanceKey %in% df.ts$taskInstanceKey) %>%
pivot_wider(id_cols = c(taskInstanceKey), names_from = "outputName", values_from = "outputValue")
# get input values
qL <- list(WorkflowTaskName = task_name, MaterialKey = mat.key)
df.in0 <- climbGETdf("taskinstances/taskInputs", queryList = qL)
dft <- tibble(taskInstanceKey = NA, inputName = NA, inputValue = NA)
if (length(df.in0) > 0) {
df.in.l <- merge(df.in0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.in.l <- dft}
df.in <-  df.in.l %>%
mutate(across(everything(), as.character)) %>%
filter(taskInstanceKey %in% df.ts$taskInstanceKey) %>%
pivot_wider(names_from = "inputName", values_from = "inputValue")
# get study and program
jobs <- climbGETdf("jobs") %>%
select(jobKey, "study"=jobID, "program"=studyName)
# get notes
notes <- climbGETdf("notes") %>%
select(noteText, taskInstanceKey, modifiedBy, dateModified) %>%
mutate(note = paste0(noteText, " [", modifiedBy, dateModified, "]")) %>%
group_by(taskInstanceKey) %>%
summarise(all_notes = paste(note, collapse = "; "), .groups = "drop")
# put it all together
df <- right_join(jobs, df.ts, by="jobKey") %>%
left_join(df.in, by="taskInstanceKey") %>%
left_join(df.out, by="taskInstanceKey") %>%
left_join(animals, by=c("a.materialKey"="materialKey")) %>%
left_join(notes, by="taskInstanceKey")  %>%
left_join(samples, by=c("s.materialKey"="materialKey")) %>%
relocate(animalName:line) %>%
select(-matches("jobKey")) %>%
select(-any_of("NA")) %>%
select(-matches("materialKey"))
View(df)
task_name="Blood Biomarkers Sample"; task_status = NULL;
animal_name = NULL; climb_id = NULL;
due_date_start = "20251009"; due_date_end = "20251017";
complete_date_start = NULL; complete_date_end = NULL
# Look up MaterialKey based on animal name or ID
mat.key <- NULL
if (!is.null(animal_name)) {
mat.key <- climbGETdf("animals") %>%
filter(animalName == toupper(animal_name)) %>%
pull(materialKey)
}
if (!is.null(climb_id)) {
mat.key <- climbGETdf("animals") %>%
filter(animalId == climb_id) %>%
pull(materialKey)
}
# Look up taskStatus key based on task status
if (!is.null(task_status)) {
ts.key <- climbGETdf("vocabulary/taskStatus") %>%
filter(name==task_status) %>%
pull(key)
} else {ts.key <- NULL}
# get animal info
animals <- climbGETdf("animals") %>%
select(materialKey, animalName, "climbID"=animalId, dateBorn, dateExit, sex, use, line) %>%
mutate(across(matches("date"), as.Date))
# get sample info
samples <- climbGETdf("samples") %>%
select(materialKey, sampleID, sampleName=name,
sampleType=type, sampleSubtype=subtype, harvestDate, sampleStatus=status,
measurement, measurementUnit, lotNumber) %>%
mutate(across(matches("date"), as.Date))
# get task instance keys for the specific query
qL <- list(WorkflowTaskName = task_name, TaskStatusKey = ts.key, MaterialKey = mat.key,
CompletedStartDate = complete_date_start, CompletedEndDate = complete_date_end,
DueStartDate = due_date_start, DueEndDate = due_date_end)
df.ts0 <- climbGETdf(facet = "taskinstances", queryList = qL)
dft <- tibble(taskInstanceKey = NA, jobKey=NA, workflowTaskName = NA, taskAlias = NA,
taskStatus = NA, materialKeys = NA, assignedTo = NA, dateDue = NA,
completedBy = NA, dateComplete = NA, reviewedBy = NA, dateReviewed = NA,
createdBy = NA, dateCreated = NA, modifiedBy = NA, dateModified = NA)
if (length(df.ts0) > 0) {
df.ts <- merge(df.ts0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.ts <- dft}
# filter out group task instances with more than 2 material keys
# one material key is for animal, one for sample if applicable, but
# it's not always animal first
df.ts <- df.ts %>%
filter(str_count(materialKeys, ";") < 2) %>%
mutate(materialKey1 = str_extract(materialKeys, "^[^;]+"),
materialKey2 = str_extract(materialKeys, "[^;]+$")) %>%
mutate(a.materialKey = case_when(materialKey1 %in% animals$materialKey ~ materialKey1,
materialKey2 %in% animals$materialKey ~ materialKey2,
.default = NA),
s.materialKey = case_when(materialKey1 %in% samples$materialKey ~ materialKey1,
materialKey2 %in% samples$materialKey ~ materialKey2,
.default = NA))
# get output values
qL <- list(WorkflowTaskName = task_name, MaterialKey = mat.key)
df.out0 <- climbGETdf("taskinstances/taskOutputs", queryList = qL)
dft <- tibble(taskInstanceKey = NA, outputName = NA, outputValue = NA, materialKeys =NA)
if (length(df.out0) > 0) {
df.out.l <- merge(df.out0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.out.l <- dft %>%
mutate(across(everything(), as.character))
}
df.out <-  df.out.l %>%
filter(taskInstanceKey %in% df.ts$taskInstanceKey) %>%
pivot_wider(id_cols = c(taskInstanceKey), names_from = "outputName", values_from = "outputValue")
# get input values
qL <- list(WorkflowTaskName = task_name, MaterialKey = mat.key)
df.in0 <- climbGETdf("taskinstances/taskInputs", queryList = qL)
dft <- tibble(taskInstanceKey = NA, inputName = NA, inputValue = NA)
if (length(df.in0) > 0) {
df.in.l <- merge(df.in0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.in.l <- dft}
df.in <-  df.in.l %>%
mutate(across(everything(), as.character)) %>%
filter(taskInstanceKey %in% df.ts$taskInstanceKey) %>%
pivot_wider(names_from = "inputName", values_from = "inputValue")
# get study and program
jobs <- climbGETdf("jobs") %>%
select(jobKey, "study"=jobID, "program"=studyName)
# get notes
notes <- climbGETdf("notes") %>%
select(noteText, taskInstanceKey, modifiedBy, dateModified) %>%
mutate(note = paste0(noteText, " [", modifiedBy, dateModified, "]")) %>%
group_by(taskInstanceKey) %>%
summarise(all_notes = paste(note, collapse = "; "), .groups = "drop")
# put it all together
df <- right_join(jobs, df.ts, by="jobKey") %>%
left_join(df.in, by="taskInstanceKey") %>%
left_join(df.out, by="taskInstanceKey") %>%
left_join(animals, by=c("a.materialKey"="materialKey")) %>%
left_join(notes, by="taskInstanceKey")  %>%
left_join(samples, by=c("s.materialKey"="materialKey")) %>%
relocate(animalName:line) %>%
select(-matches("jobKey")) %>%
select(-any_of("NA")) %>%
select(-matches("materialKey"))
View(df)
library(tidyverse)
source("https://raw.githubusercontent.com/annat22/ClimbR/main/climbGETdf.R")
wgs <- climbGETbde(task_name="DNA Sample")
source("https://raw.githubusercontent.com/annat22/ClimbR/main/climbGETbde.R")
wgs <- climbGETbde(task_name="DNA Sample")
wgs <- climbGETbde(task_name="DNA Sample", task_status = "Ongoing")
View(wgs)
wgs <- climbGETbde(task_name="DNA Sample", task_status = "Delete")
