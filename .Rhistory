source("https://raw.github.com/annat22/ClimbR/main/climbGETdf.R")
library(tidyverse)
source("https://raw.github.com/annat22/ClimbR/main/climbGETdf.R")
task_name="Blood Biomarkers Sample"; task_status = "Complete";
animal_name = NULL; climb_id = NULL;
due_date_start = NULL; due_date_end = NULL;
complete_date_start = NULL; complete_date_end = NULL
# Look up MaterialKey based on animal name or ID
mat.key <- NULL
if (!is.null(animal_name)) {
mat.key <- climbGETdf("animals") %>%
filter(animalName == toupper(animal_name)) %>%
pull(materialKey)
}
if (!is.null(climb_id)) {
mat.key <- climbGETdf("animals") %>%
filter(animalId == climb_id) %>%
pull(materialKey)
}
# Look up taskStatus key based on task status
if (!is.null(task_status)) {
ts.key <- climbGETdf("vocabulary/taskStatus") %>%
filter(name==task_status) %>%
pull(key)
} else {ts.key <- NULL}
# get task instance keys for the specific query
qL <- list(WorkflowTaskName = task_name, TaskStatusKey = ts.key, MaterialKey = mat.key,
CompletedStartDate = complete_date_start, CompletedEndDate = complete_date_end,
DueStartDate = due_date_start, DueEndDate = due_date_end)
df.ts0 <- climbGETdf(facet = "taskinstances", queryList = qL)
dft <- tibble(taskInstanceKey = NA, jobKey=NA, workflowTaskName = NA, taskAlias = NA,
taskStatus = NA, materialKeys = NA, assignedTo = NA, dateDue = NA,
completedBy = NA, dateComplete = NA, reviewedBy = NA, dateReviewed = NA,
createdBy = NA, dateCreated = NA, modifiedBy = NA, dateModified = NA)
if (length(df.ts0) > 0) {
df.ts <- merge(df.ts0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.ts <- dft}
df.ts <- df.ts %>%
mutate(a.materialKey = str_extract(materialKeys, "^[^;]+"),
s.materialKey = str_extract(materialKeys, "[^;]+$"))
# get output values
qL <- list(WorkflowTaskName = task_name, MaterialKey = mat.key)
df.out0 <- climbGETdf("taskinstances/taskOutputs", queryList = qL)
dft <- tibble(taskInstanceKey = NA, outputName = NA, outputValue = NA, materialKeys =NA)
if (length(df.out0) > 0) {
df.out <- merge(df.out0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.out <- dft}
df.out <-  df.out %>% pivot_wider(names_from = "outputName", values_from = "outputValue")
# get input values
qL <- list(WorkflowTaskName = task_name, MaterialKey = mat.key)
df.in0 <- climbGETdf("taskinstances/taskInputs", queryList = qL)
dft <- tibble(taskInstanceKey = NA, inputName = NA, inputValue = NA)
if (length(df.in0) > 0) {
df.in <- merge(df.in0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.in <- dft}
df.in <-  df.in %>% pivot_wider(names_from = "inputName", values_from = "inputValue")
cid <- climbGETdf("animals")
cid <- cid %>%
select(materialKey, animalName, "climbID"=animalId, dateBorn, dateExit, sex, use, line)
# get study and program
jobs <- climbGETdf("jobs") %>%
select(jobKey, "study"=jobID, "program"=studyName)
# get notes
notes <- climbGETdf("notes") %>%
select(noteText, taskInstanceKey, modifiedBy, dateModified) %>%
mutate(note = paste0(noteText, "[", modifiedBy, dateModified, "]")) %>%
group_by(taskInstanceKey) %>%
summarise(all_notes = paste(note, collapse = "; "), .groups = "drop")
# put it all together
df <- right_join(jobs, df.ts, by="jobKey") %>%
left_join(df.in, by="taskInstanceKey") %>%
left_join(df.out, by="taskInstanceKey") %>%
left_join(cid, by=c("materialKeys.y"="materialKey")) %>%
left_join(notes, by="taskInstanceKey") %>%
relocate(animalName, climbID) %>%
select(-matches("jobKey")) %>%
select(-matches("NA"))
View(df)
# put it all together
df <- right_join(jobs, df.ts, by="jobKey") %>%
left_join(df.in, by="taskInstanceKey") %>%
left_join(df.out, by="taskInstanceKey") %>%
left_join(cid, by=c("materialKeys.y"="materialKey")) %>%
left_join(notes, by="taskInstanceKey") %>%
relocate(animalName:line) %>%
select(-matches("jobKey")) %>%
select(-matches("NA"))
df <- right_join(jobs, df.ts, by="jobKey") %>%
left_join(df.in, by="taskInstanceKey") %>%
left_join(df.out, by="taskInstanceKey") %>%
left_join(cid, by=c("materialKeys.y"="materialKey")) %>%
left_join(notes, by="taskInstanceKey")
df <- right_join(jobs, df.ts, by="jobKey") %>%
left_join(df.in, by="taskInstanceKey") %>%
left_join(df.out, by="taskInstanceKey") %>%
left_join(cid, by=c("materialKeys.y"="materialKey")) %>%
left_join(notes, by="taskInstanceKey") %>%
relocate(animalName:line)
df <- right_join(jobs, df.ts, by="jobKey") %>%
left_join(df.in, by="taskInstanceKey") %>%
left_join(df.out, by="taskInstanceKey") %>%
left_join(cid, by=c("materialKeys.y"="materialKey")) %>%
left_join(notes, by="taskInstanceKey") %>%
relocate(animalName:line) %>%
select(-matches("jobKey"))
# put it all together
df <- right_join(jobs, df.ts, by="jobKey") %>%
left_join(df.in, by="taskInstanceKey") %>%
left_join(df.out, by="taskInstanceKey") %>%
left_join(cid, by=c("materialKeys.y"="materialKey")) %>%
left_join(notes, by="taskInstanceKey") %>%
relocate(animalName:line) %>%
select(-matches("jobKey")) %>%
select(-matches("NA", ignore.case = FALSE))
df <- right_join(jobs, df.ts, by="jobKey") %>%
left_join(df.in, by="taskInstanceKey") %>%
left_join(df.out, by="taskInstanceKey") %>%
left_join(cid, by=c("materialKeys.y"="materialKey")) %>%
left_join(notes, by="taskInstanceKey") %>%
relocate(animalName:line) %>%
select(-matches("jobKey"))
# put it all together
df <- right_join(jobs, df.ts, by="jobKey") %>%
left_join(df.in, by="taskInstanceKey") %>%
left_join(df.out, by="taskInstanceKey") %>%
left_join(cid, by=c("materialKeys.y"="materialKey")) %>%
left_join(notes, by="taskInstanceKey") %>%
relocate(animalName:line) %>%
select(-matches("jobKey")) %>%
select(-matches("NA", ignore.case = FALSE))
# put it all together
df <- right_join(jobs, df.ts, by="jobKey") %>%
left_join(df.in, by="taskInstanceKey") %>%
left_join(df.out, by="taskInstanceKey") %>%
left_join(cid, by=c("materialKeys.y"="materialKey")) %>%
left_join(notes, by="taskInstanceKey") %>%
relocate(animalName:line) %>%
select(-matches("jobKey")) %>%
select(-"NA")
any(df.ts0$sampleCount > 0)
samples <- climbGETdf("samples")
sort(colnames(samples))
samples <- climbGETdf("samples") %>%
select(materialKey, sampleName=name,
sampleType=type, harvestDate, sampleStatus=status,
measurement, measurementUnit, lotNumber)
df <- left_join(df, samples, by=c("s.materialKey"="materialKey"))
df <- df  %>%
select(-matches("materialKey"))
View(df)
# get notes
notes <- climbGETdf("notes") %>%
select(noteText, taskInstanceKey, modifiedBy, dateModified) %>%
mutate(note = paste0(noteText, " [", modifiedBy, dateModified, "]")) %>%
group_by(taskInstanceKey) %>%
summarise(all_notes = paste(note, collapse = "; "), .groups = "drop")
# put it all together
df <- right_join(jobs, df.ts, by="jobKey") %>%
left_join(df.in, by="taskInstanceKey") %>%
left_join(df.out, by="taskInstanceKey") %>%
left_join(cid, by=c("materialKeys.y"="materialKey")) %>%
left_join(notes, by="taskInstanceKey") %>%
relocate(animalName:line) %>%
select(-matches("jobKey")) %>%
select(-any_of("NA"))
samples <- climbGETdf("samples") %>%
select(materialKey, sampleName=name,
sampleType=type, harvestDate, sampleStatus=status,
measurement, measurementUnit, lotNumber)
df <- left_join(df, samples, by=c("s.materialKey"="materialKey"))
df <- df  %>%
select(-matches("materialKey"))
View(df)
# get animal name, climb ID, and other info
cid <- climbGETdf("animals") %>%
select(materialKey, animalName, "climbID"=animalId, dateBorn, dateExit, sex, use, line) %>%
mutate(matches("date") ~ as.Date)
cid <- climbGETdf("animals") %>%
select(materialKey, animalName, "climbID"=animalId, dateBorn, dateExit, sex, use, line)
cid <- cid %>% mutate(across(matches("date")), as.Date)
cid <- cid %>% mutate(across(matches("date"), as.Date))
# put it all together
df <- right_join(jobs, df.ts, by="jobKey") %>%
left_join(df.in, by="taskInstanceKey") %>%
left_join(df.out, by="taskInstanceKey") %>%
left_join(cid, by=c("materialKeys.y"="materialKey")) %>%
left_join(notes, by="taskInstanceKey") %>%
relocate(animalName:line) %>%
select(-matches("jobKey")) %>%
select(-any_of("NA"))
# add sample info for study-type tasks
if (any(df.ts0$sampleCount > 0)) {
samples <- climbGETdf("samples") %>%
select(materialKey, sampleName=name,
sampleType=type, harvestDate, sampleStatus=status,
measurement, measurementUnit, lotNumber)
df <- left_join(df, samples, by=c("s.materialKey"="materialKey"))
}
df <- df  %>%
select(-matches("materialKey"))
source("https://raw.github.com/annat22/ClimbR/main/climbGETdf.R")
task_name="DNA Sample"; task_status = "Complete";
animal_name = NULL; climb_id = NULL;
due_date_start = NULL; due_date_end = NULL;
complete_date_start = NULL; complete_date_end = NULL
# Look up MaterialKey based on animal name or ID
mat.key <- NULL
if (!is.null(animal_name)) {
mat.key <- climbGETdf("animals") %>%
filter(animalName == toupper(animal_name)) %>%
pull(materialKey)
}
if (!is.null(climb_id)) {
mat.key <- climbGETdf("animals") %>%
filter(animalId == climb_id) %>%
pull(materialKey)
}
# Look up taskStatus key based on task status
if (!is.null(task_status)) {
ts.key <- climbGETdf("vocabulary/taskStatus") %>%
filter(name==task_status) %>%
pull(key)
} else {ts.key <- NULL}
# get task instance keys for the specific query
qL <- list(WorkflowTaskName = task_name, TaskStatusKey = ts.key, MaterialKey = mat.key,
CompletedStartDate = complete_date_start, CompletedEndDate = complete_date_end,
DueStartDate = due_date_start, DueEndDate = due_date_end)
df.ts0 <- climbGETdf(facet = "taskinstances", queryList = qL)
dft <- tibble(taskInstanceKey = NA, jobKey=NA, workflowTaskName = NA, taskAlias = NA,
taskStatus = NA, materialKeys = NA, assignedTo = NA, dateDue = NA,
completedBy = NA, dateComplete = NA, reviewedBy = NA, dateReviewed = NA,
createdBy = NA, dateCreated = NA, modifiedBy = NA, dateModified = NA)
if (length(df.ts0) > 0) {
df.ts <- merge(df.ts0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.ts <- dft}
df.ts <- df.ts %>%
mutate(a.materialKey = str_extract(materialKeys, "^[^;]+"),
s.materialKey = str_extract(materialKeys, "[^;]+$"))
# get output values
qL <- list(WorkflowTaskName = task_name, MaterialKey = mat.key)
df.out0 <- climbGETdf("taskinstances/taskOutputs", queryList = qL)
dft <- tibble(taskInstanceKey = NA, outputName = NA, outputValue = NA, materialKeys =NA)
if (length(df.out0) > 0) {
df.out <- merge(df.out0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.out <- dft}
df.out <-  df.out %>% pivot_wider(names_from = "outputName", values_from = "outputValue")
# get input values
qL <- list(WorkflowTaskName = task_name, MaterialKey = mat.key)
df.in0 <- climbGETdf("taskinstances/taskInputs", queryList = qL)
dft <- tibble(taskInstanceKey = NA, inputName = NA, inputValue = NA)
if (length(df.in0) > 0) {
df.in <- merge(df.in0, dft, all.x=TRUE, all.y=FALSE, sort=FALSE) %>%
select(colnames(dft))
} else {df.in <- dft}
df.in <-  df.in %>% pivot_wider(names_from = "inputName", values_from = "inputValue")
# get animal name, climb ID, and other info
cid <- climbGETdf("animals") %>%
select(materialKey, animalName, "climbID"=animalId, dateBorn, dateExit, sex, use, line) %>%
mutate(across(matches("date"), as.Date))
# get study and program
jobs <- climbGETdf("jobs") %>%
select(jobKey, "study"=jobID, "program"=studyName)
# get notes
notes <- climbGETdf("notes") %>%
select(noteText, taskInstanceKey, modifiedBy, dateModified) %>%
mutate(note = paste0(noteText, " [", modifiedBy, dateModified, "]")) %>%
group_by(taskInstanceKey) %>%
summarise(all_notes = paste(note, collapse = "; "), .groups = "drop")
# put it all together
df <- right_join(jobs, df.ts, by="jobKey") %>%
left_join(df.in, by="taskInstanceKey") %>%
left_join(df.out, by="taskInstanceKey") %>%
left_join(cid, by=c("materialKeys.y"="materialKey")) %>%
left_join(notes, by="taskInstanceKey") %>%
relocate(animalName:line) %>%
select(-matches("jobKey")) %>%
select(-any_of("NA"))
df <- right_join(jobs, df.ts, by="jobKey") %>%
left_join(df.in, by="taskInstanceKey") %>%
left_join(df.out, by="taskInstanceKey") %>%
left_join(cid, by=c("materialKeys.y"="materialKey")) %>%
left_join(notes, by="taskInstanceKey") %>%
relocate(animalName:line) %>%
select(-matches("jobKey"))
View(df)
# put it all together
df <- right_join(jobs, df.ts, by="jobKey") %>%
left_join(df.in, by="taskInstanceKey") %>%
left_join(df.out, by="taskInstanceKey") %>%
left_join(cid, by=c("materialKeys.y"="materialKey")) %>%
left_join(notes, by="taskInstanceKey") %>%
relocate(animalName:line) %>%
select(-matches("jobKey")) %>%
select(-any_of("NA"))
# add sample info for study-type tasks
if (any(df.ts0$sampleCount > 0)) {
samples <- climbGETdf("samples") %>%
select(materialKey, sampleName=name,
sampleType=type, harvestDate, sampleStatus=status,
measurement, measurementUnit, lotNumber)
df <- left_join(df, samples, by=c("s.materialKey"="materialKey"))
}
df <- df  %>%
select(-matches("materialKey"))
View(df)
source("https://raw.github.com/annat22/ClimbR/main/climbGETdf.R")
ac <- climbGETdf("animals")
View(ac)
climbID=c("408", "230", "5"", "6")
climbID=c("408", "230", "5", "6")
library(synapser)
library(readxl)
library(tidyverse)
library(lubridate)
synLogin(silent=TRUE)
# load template from synapse
temp <- read_xlsx(synGet("syn64423522")$path, sheet = 1)
# load mapping table from synapse
csmap0 <- read_csv(synGet("syn26137185")$path) %>%
filter(synapseFile=="individual") %>%
select(synapseField, climbFacet, climbField)
csmap <- csmap0 %>%
filter(!is.na(climbField))
View(csmap)
csmap0 <- read_csv(synGet("syn26137185")$path)
View(csmap0)
# load mapping table from synapse
csmap0 <- read_csv(synGet("syn26137185")$path) %>%
filter(synapseFile=="individual") %>%
select(synapseField, climbFacet, climbField)
csmap <- csmap0 %>%
filter(!is.na(climbField))
cat("Generating individual metadata file from climbID\n")
# get animal metadata from climb
inds <- climbGETdf("animals") %>%
filter(animalId %in% climbID) %>%
# calculate age from dateBorn and dateExit
mutate(dateExit = as_date(ymd_hms(dateExit)),
dateBorn = as_date(ymd_hms(dateBorn)),
ageDeath = difftime(dateExit, dateBorn, units = "days"),
ageDeath = round(as.double(gsub(" days", "", ageDeath))),
ageDeathUnits = "days")
# get lines info from climb
lines <-  climbGETdf("lines") %>%
filter(lineKey %in% ind_c$lineKey) %>%
select(lineKey, line=name, shortName, stock, backgroundLine)
# get lines info from climb
lines <-  climbGETdf("lines") %>%
filter(lineKey %in% inds$lineKey) %>%
select(lineKey, line=name, shortName, stock, backgroundLine)
# get genotypes from climb
gts <- climbGETdf("genotypes") %>%
filter(animalID %in% climbID) %>%
mutate(genotype = paste(assay, genotype, sep="_")) %>%
select(animalId=animalID, assay, genotype) %>%
group_by(animalId) %>%
summarize(genotype=paste0(unique(genotype),collapse=", "))
# combine metadata from climb and add matingID and birthID (not available via API)
meta_c <- left_join(inds, gts) %>%
left_join(lines) %>%
mutate(birthID=NA, matingID=NA) %>%
#left_join(rooms) %>%
# mutate(individualIdSource = origin) %>%
select(csmap$climbField)
# join metadata from climb with synapse template
meta <- merge(temp, meta_c, all.x=FALSE, all.y=TRUE, by.x=csmap$synapseField, by.y=csmap$climbField, sort=FALSE) %>%
select(csmap0$synapseField)
View(meta)
View(meta_c)
source("https://raw.github.com/annat22/RModelAD/master/gen_ind_meta_id.R")
View(gen_ind_meta_id)
source("https://raw.github.com/annat22/RModelAD/master/gen_ind_meta_id.R")
climbID=c("408", "230", "5", "6")
meta <- gen_ind_meta_id(climbID)
View(meta)
climbID=c("408", "230", "5", "6")
source("https://raw.github.com/annat22/RModelAD/master/gen_ind_meta_id.R")
meta <- gen_ind_meta_id(climbID)
